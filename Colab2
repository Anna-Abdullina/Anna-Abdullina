from transformers import DetrImageProcessor, DetrForObjectDetection
import torch
from PIL import Image
import requests
import cv2
import urllib
import numpy as np
from google.colab.patches import cv2_imshow

url = 'https://i.pinimg.com/originals/56/81/6c/56816c09a39b28e6ba016b2e4ee73b38.jpg'
image = Image.open(requests.get(url, stream=True).raw)

def draw_object_bounding_box(image_to_process, box, item):
    x, y, w, h = box
    start = (int(x), int(y))
    end = (int(x + w), int(y + h))
    color = (0, 255, 0)
    width = 2
    final_image = cv2.rectangle(image_to_process, start, end, color, width)

    start = (int(x), int(y - 10))
    font_size = 1
    font = cv2.FONT_HERSHEY_SIMPLEX
    width = 2
    final_image = cv2.putText(final_image, item, start, font,
                              font_size, color, width, cv2.LINE_AA)


    return final_image

processor = DetrImageProcessor.from_pretrained("facebook/detr-resnet-50", revision="no_timm")
model = DetrForObjectDetection.from_pretrained("facebook/detr-resnet-50", revision="no_timm")

inputs = processor(images=image, return_tensors="pt")
outputs = model(**inputs)

# конвертируем выходные данные (ограничивающие рамки и логиты классов)
# оставим только обнаружения со счетом > 0,9
target_sizes = torch.tensor([image.size[::-1]])
results = processor.post_process_object_detection(outputs, target_sizes=target_sizes, threshold=0.9)[0]

for score, label, box in zip(results["scores"], results["labels"], results["boxes"]):
    box = [round(i, 2) for i in box.tolist()]
    print(
            f"Detected {model.config.id2label[label.item()]} with confidence "
            f"{round(score.item(), 3)} at location {box}"
    )
    req = urllib.request.urlopen(url)
    arr = np.asarray(bytearray(req.read()), dtype=np.uint8)
    img = cv2.imdecode(arr, -1)

    cv2_imshow(draw_object_bounding_box(img, box, model.config.id2label[label.item()]))
